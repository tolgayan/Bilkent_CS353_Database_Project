/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('app:server');
const http = require('http');
const db = require('../public/javascripts/db');

// user
db.query(
"CREATE TABLE IF NOT EXISTS user(\
user_id int AUTO_INCREMENT, \
password VARCHAR(25), \
email	varchar(50) not null, \
PRIMARY KEY (user_id)); "
);

// club
db.query(
"CREATE TABLE IF NOT EXISTS club( \
club_id int AUTO_INCREMENT PRIMARY KEY REFERENCES user (user_id),\
club_name	varchar(50) not null, \
country varchar(50), \
password varchar(25), \
email	varchar(50) not null, \
wage_budget int);"
);

// scout agency
db.query(
"CREATE TABLE IF NOT EXISTS scout_agency( \
agency_id int AUTO_INCREMENT PRIMARY KEY REFERENCES user (user_id),\
agency_name	varchar(50) not null,\
password VARCHAR(25), \
email	varchar(50) not null, \
price_per_scout	int);"
);

// scout
db.query(
"CREATE TABLE IF NOT EXISTS scout( \
scout_id int AUTO_INCREMENT PRIMARY KEY REFERENCES user(user_id), \
agency_id int REFERENCES scout_agency(agency_id), \
scout_name VARCHAR(25), \
scout_surname VARCHAR(25), \
is_available ENUM('true', 'false'))");




// editor
db.query(
"CREATE TABLE IF NOT EXISTS editor( \
editor_id int AUTO_INCREMENT PRIMARY KEY REFERENCES user (user_id), \
password VARCHAR(25), \
email	varchar(50) not null, \
name varchar(80) not null);"
);

// agent
db.query(
"CREATE TABLE IF NOT EXISTS agent( \
agent_id int AUTO_INCREMENT PRIMARY KEY REFERENCES user (user_id), \
password VARCHAR(25), \
email	varchar(50) not null, \
agent_name varchar(80));"
);


// standard
db.query( "CREATE TABLE IF NOT EXISTS standard( \
standard_id int AUTO_INCREMENT PRIMARY KEY REFERENCES user (user_id), \
password VARCHAR(25), \
email	varchar(50) not null, \
username varchar(80) not null)");

//task table
db.query("CREATE TABLE IF NOT EXISTS task(id int AUTO_INCREMENT, \
transfer_price int, salary int, foot VARCHAR(5), age smallint, weight smallint, height smallint, \
position VARCHAR(10), time smallint, \
scout_num smallint NOT NULL, assigned_date DATE NOT NULL, \
status ENUM('completed', 'uncompleted'), agency_id int REFERENCES agency(agency_id), \
PRIMARY KEY(id))");

//footballer table(REMOVE CLUB NAME RATHER CLUB ID)
db.query("CREATE TABLE IF NOT EXISTS footballer(player_id int AUTO_INCREMENT, agent_id int REFERENCES agent(agent_id), \
forename VARCHAR(25) NOT NULL, surname VARCHAR(25) NOT NULL, gender ENUM('woman', 'man'), \
position VARCHAR(10) NOT NULL,\
height smallint, weight smallint, birth_date DATE, foot ENUM('left', 'right'), salary int, transfer_price int,\
nationality VARCHAR(25), image_id int REFERENCES image(id), club_name VARCHAR(50) REFERENCES club, PRIMARY KEY(player_id))");


//images
db.query("CREATE TABLE IF NOT EXISTS images(id int AUTO_INCREMENT, image VARCHAR(200), PRIMARY KEY(id))");


//report table
db.query("CREATE TABLE IF NOT EXISTS final_report(report_id int AUTO_INCREMENT, player_id int REFERENCES footballer(player_id), \
scout_id int REFERENCES scout(scout_id), rating int(1), task_id int REFERENCES task(id), comment VARCHAR(1000), PRIMARY KEY(report_id))");


//statistics table
db.query("CREATE TABLE IF NOT EXISTS final_report(statistics_id int AUTO_INCREMENT, player_id int REFERENCES footballer(player_id), \
team VARCHAR(25), goal smallint, season VARCHAR(10), assist smallint, games smallint, PRIMARY KEY(statistics_id, player_id))");

//assign table
db.query("CREATE TABLE IF NOT EXISTS assign(task_id int REFERENCES task(id), club_id int REFERENCES club(club_id), PRIMARY KEY(club_id, task_id))");

//assignment table
db.query("CREATE TABLE IF NOT EXISTS assignment(scout_id int REFERENCES scout(scout_id), task_id int REFERENCES task(task_id), PRIMARY KEY(task_id, scout_id))");

//insert images

/*
db.query('INSERT INTO images(id,image) VALUES(1, "https://tmssl.akamaized.net/images/portrait/header/8198-1568120625.jpg?lm=1568120652")');
db.query('INSERT INTO images(id, image) VALUES(2, "https://tmssl.akamaized.net/images/portrait/header/68290-1582115300.jpg?lm=1582115313")');
db.query('INSERT INTO images(id, image) VALUES(3, "https://tmssl.akamaized.net/images/portrait/header/132098-1522316722.jpg?lm=1522316737")');
db.query('INSERT INTO images(id,image) VALUES(4, "https://tmssl.akamaized.net/images/portrait/header/271495-1565713675.png?lm=1565713773")');
db.query('INSERT INTO images(id, image) VALUES(5, "https://tmssl.akamaized.net/images/portrait/header/128899-1528450176.jpg?lm=1528450194")');
db.query('INSERT INTO images(id, image) VALUES(6, "https://tmssl.akamaized.net/images/portrait/header/292199-1565711264.png?lm=1565711291")');
db.query('INSERT INTO images(id, image) VALUES(7, "https://tmssl.akamaized.net/images/portrait/header/16306-1454413595.jpg?lm=1454413598")');
db.query('INSERT INTO images(id, image) VALUES(8, "https://tmssl.akamaized.net/images/portrait/header/25557-1413190249.jpg?lm=1433144128")');
*/


/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
